plugins {
    id 'java'
}

def templateSource = file('src/main/templates')
def templateDest = layout.buildDirectory.dir('generated/sources/templates')

task generateTemplates(type: Copy) {
    def commitCode = rootProject.hasProperty('commitCode') ? rootProject.property('commitCode') : (System.getenv('GITHUB_SHA') ?: 'dev')
    def releaseTag = rootProject.hasProperty('releaseDate') ? rootProject.property('releaseDate') : (rootProject.ext.has('tag') ? rootProject.ext.tag : rootProject.version?.toString())

    def props = [
            'version': rootProject.version?.toString(),
            'commit' : commitCode,
            'tag'    : releaseTag,
            'name'   : rootProject.name,
            'id'     : rootProject.name.toLowerCase(),
            'group'  : project.group,
            'author' : "Freddi"
    ]

    inputs.properties(props)
    from templateSource
    into templateDest
    expand props
}

// Stelle sicher, dass die Templates generiert werden, bevor der Code kompiliert wird
compileJava.dependsOn generateTemplates

// Füge die generierten Templates zu den Quellordnern hinzu
sourceSets.main.java.srcDir templateDest

// Setze das Verzeichnis der generierten Templates für späteren Zugriff
ext.generatedTemplateDir = templateDest.get().asFile



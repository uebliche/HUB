import java.net.URL
import groovy.json.JsonSlurper
import java.nio.charset.StandardCharsets


def fetchJson(String url) {
    def connection = new URL(url).openConnection()
    connection.setRequestProperty('User-Agent', 'Hub-Build-Script')
    connection.connectTimeout = 15000
    connection.readTimeout = 15000
    connection.doInput = true
    connection.connect()
    try (def reader = connection.getInputStream().newReader(StandardCharsets.UTF_8)) {
        return new JsonSlurper().parse(reader)
    }
}

int compareVersions(String a, String b) {
    List<Integer> left = a.tokenize('.').collect { it.isInteger() ? it.toInteger() : 0 }
    List<Integer> right = b.tokenize('.').collect { it.isInteger() ? it.toInteger() : 0 }
    int size = Math.max(left.size(), right.size())
    for (int i = 0; i < size; i++) {
        int l = i < left.size() ? left.get(i) : 0
        int r = i < right.size() ? right.get(i) : 0
        if (l != r) {
            return l <=> r
        }
    }
    return 0
}

plugins {
    id 'java'
    id 'eclipse'
    id 'org.jetbrains.gradle.plugin.idea-ext' version '1.1.8'
}

// Gradle helper to obtain the newest version of a PaperMC project with fallbacks
String fetchLatestProjectVersion(String projectId) {
    try {
        def data = fetchJson("https://api.papermc.io/v2/projects/${projectId}")
        def versions = data?.versions
        if (!(versions instanceof List) || versions.isEmpty()) {
            throw new GradleException("No versions returned for project ${projectId}")
        }
        versions = versions.findAll { it instanceof String }
        versions.sort { a, b -> compareVersions(a, b) }
        return versions.last()
    } catch (Exception exception) {
        throw new GradleException("Failed to fetch latest version for ${projectId}", exception)
    }
}

String resolveVelocityVersion() {
    def configured = findProperty('velocityVersion')?.toString()
    if (!configured || configured.equalsIgnoreCase('latest')) {
        return fetchLatestProjectVersion('velocity')
    }
    return configured
}

String resolvePaperVersion() {
    def configured = findProperty('paperVersion')?.toString()
    if (!configured || configured.equalsIgnoreCase('latest')) {
        def latest = fetchLatestProjectVersion('paper')
        return "${latest}-R0.1-SNAPSHOT"
    }
    if (configured ==~ /\d+\.\d+(\.\d+)?/) {
        return "${configured}-R0.1-SNAPSHOT"
    }
    return configured
}

List<String> fetchPaperGameVersions(String minVersion) {
    try {
        def projectData = fetchJson('https://api.papermc.io/v2/projects/paper')
        def versions = projectData?.versions ?: []
        versions = versions.findAll { it instanceof String }
        versions.sort { a, b -> compareVersions(a, b) }
        versions = versions.findAll { compareVersions(it, minVersion) >= 0 }
        def supported = []
        String snapshotCandidate = null
        versions.each { version ->
            def versionData = fetchJson("https://api.papermc.io/v2/projects/paper/versions/${version}")
            def builds = versionData?.builds ?: []
            builds = builds.findAll { it instanceof Number || (it instanceof String && it.isInteger()) }
            builds.sort { a, b -> (a as Integer) <=> (b as Integer) }
            Integer latestReleaseBuild = null
            Integer latestSnapshotBuild = null
            for (int i = builds.size() - 1; i >= 0; i--) {
                def buildNumber = builds.get(i) as Integer
                def buildData = fetchJson("https://api.papermc.io/v2/projects/paper/versions/${version}/builds/${buildNumber}")
                String channel = (buildData?.channel ?: 'default').toString()
                if (channel == 'default' && latestReleaseBuild == null) {
                    latestReleaseBuild = buildNumber
                } else if (channel != 'default' && latestSnapshotBuild == null) {
                    latestSnapshotBuild = buildNumber
                }
                if (latestReleaseBuild != null && latestSnapshotBuild != null) {
                    break
                }
            }
            if (latestReleaseBuild != null) {
                supported << version
            }
            if (snapshotCandidate == null && latestSnapshotBuild != null) {
                snapshotCandidate = version
            }
        }
        if (snapshotCandidate != null && !supported.contains(snapshotCandidate)) {
            supported << snapshotCandidate
        }
        return supported.unique()
    } catch (Exception exception) {
        logger.warn('Failed to determine supported Paper versions, falling back to minimum version.', exception)
        return [minVersion] as List<String>
    }
}

String resolveTag() {
    def provided = (project.findProperty('tag') ?: System.getenv('TAG') ?: System.getenv('GITHUB_REF_NAME'))
    provided = provided ? provided.toString().trim() : ''
    if (provided) {
        return provided
    }
    return "dev-${new Date().format('yyyyMMdd-HHmmss')}"
}

def resolvedTag = resolveTag()
def resolvedVersionType = (project.findProperty('version_type') ?: System.getenv('VERSION_TYPE') ?: 'release').toString()
def resolvedDebug = (project.findProperty('debug') ?: System.getenv('DEBUG') ?: 'false').toString()
def resolvedVelocityVersion = resolveVelocityVersion()
def resolvedPaperVersion = resolvePaperVersion()
def minPaperVersion = (project.findProperty('minPaperVersion') ?: '1.16').toString()
def supportedPaperGameVersions = fetchPaperGameVersions(minPaperVersion)

description = 'Hub plugin for Velocity and Paper'
version = resolvedTag

ext {
    tag = resolvedTag
    version = resolvedTag
    versionType = resolvedVersionType
    debug = resolvedDebug
    velocityVersion = resolvedVelocityVersion
    paperVersion = resolvedPaperVersion
    paperGameVersions = supportedPaperGameVersions
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'eclipse'

    group = 'net.uebliche'
    version = rootProject.version

    repositories {
        mavenCentral()
        gradlePluginPortal()
        maven {
            name = "papermc-repo"
            url = "https://repo.papermc.io/repository/maven-public/"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/groups/public/"
        }
    }

    ext {
        tag = rootProject.tag
        version = rootProject.version
        versionType = rootProject.versionType
        debug = rootProject.debug
        velocityVersion = rootProject.velocityVersion
        paperVersion = rootProject.paperVersion
        paperGameVersions = rootProject.paperGameVersions
    }

    def targetJavaVersion = 21
    java {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = 'UTF-8'
        options.release.set(targetJavaVersion)
    }
}
